# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - run: npm install
    - run: npx cordova prepare


    - run: npx gulp
    - run: npx cordova build android --release
    - name: Sign apks
      run: # KEYSTORE should be a base64 string of the keystore
        echo "${{secrets.KEYSTORE}}" > mykey.keystore.txt
        base64 -d mykey.keystore.txt > mykey.keystore
        jarsigner.exe -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore mykey.keystore ./platforms/android/app/build/outputs/apk/release/*.apk ${{secrets.KEYALIAS}} -storepass ${{secrets.KEYPASS}}
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        path: ./platforms/android/app/build/outputs/apk/
      

